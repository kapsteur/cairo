//! > Test expansion of a dispatcher.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::interface]
trait IContract<T> {
    fn get_something(ref self: T, arg: felt252, num: felt252) -> felt252;

    fn empty(self: @T);

    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(self: @T, __calldata__: felt252);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::interface]
trait IContract<T> {
    fn get_something(ref self: T, arg: felt252, num: felt252) -> felt252;

    fn empty(self: @T);

    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(self: @T, __calldata__: felt252);
}

IContractDispatcherTrait:

trait IContractDispatcherTrait<T> {
    fn get_something(self: T, arg: felt252, num: felt252) -> felt252;
    fn empty(self: T, );
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct IContractDispatcher {
    contract_address: starknet::ContractAddress,
}

impl IContractDispatcherImpl of IContractDispatcherTrait<IContractDispatcher> {
    fn get_something(self: IContractDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct IContractLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl IContractLibraryDispatcherImpl of IContractDispatcherTrait<IContractLibraryDispatcher> {
    fn get_something(self: IContractLibraryDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractLibraryDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait IContractSafeDispatcherTrait<T> {
    fn get_something(self: T, arg: felt252, num: felt252) -> starknet::SyscallResult<felt252>;
    fn empty(self: T, ) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct IContractSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl IContractSafeLibraryDispatcherImpl of IContractSafeDispatcherTrait<IContractSafeLibraryDispatcher> {
    fn get_something(self: IContractSafeLibraryDispatcher, arg: felt252, num: felt252) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }

    fn empty(self: IContractSafeLibraryDispatcher, ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct IContractSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl IContractSafeDispatcherImpl of IContractSafeDispatcherTrait<IContractSafeDispatcher> {
    fn get_something(self: IContractSafeDispatcher, arg: felt252, num: felt252) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }

    fn empty(self: IContractSafeDispatcher, ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


impls:

impl IContractDispatcherCopy of Copy<IContractDispatcher>:
impl IContractDispatcherDrop of Drop<IContractDispatcher>:
impl IContractDispatcherSerde of Serde<IContractDispatcher> {
    fn serialize(self: @IContractDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output);
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractDispatcher> {
        Option::Some(IContractDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StoreIContractDispatcher of starknet::Store::<IContractDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}

impls:

impl IContractLibraryDispatcherCopy of Copy<IContractLibraryDispatcher>:
impl IContractLibraryDispatcherDrop of Drop<IContractLibraryDispatcher>:
impl IContractLibraryDispatcherSerde of Serde<IContractLibraryDispatcher> {
    fn serialize(self: @IContractLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output);
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractLibraryDispatcher> {
        Option::Some(IContractLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StoreIContractLibraryDispatcher of starknet::Store::<IContractLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}

impls:

impl IContractSafeLibraryDispatcherCopy of Copy<IContractSafeLibraryDispatcher>:
impl IContractSafeLibraryDispatcherDrop of Drop<IContractSafeLibraryDispatcher>:
impl IContractSafeLibraryDispatcherSerde of Serde<IContractSafeLibraryDispatcher> {
    fn serialize(self: @IContractSafeLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output);
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractSafeLibraryDispatcher> {
        Option::Some(IContractSafeLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StoreIContractSafeLibraryDispatcher of starknet::Store::<IContractSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}

impls:

impl IContractSafeDispatcherCopy of Copy<IContractSafeDispatcher>:
impl IContractSafeDispatcherDrop of Drop<IContractSafeDispatcher>:
impl IContractSafeDispatcherSerde of Serde<IContractSafeDispatcher> {
    fn serialize(self: @IContractSafeDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output);
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractSafeDispatcher> {
        Option::Some(IContractSafeDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StoreIContractSafeDispatcher of starknet::Store::<IContractSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}

//! > expected_diagnostics
error: Missing token TerminalSemicolon.
 --> impls:1:28
impl boolCopy of Copy<bool>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl boolCopy of Copy<bool>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl boolDrop of Drop<bool>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl boolDrop of Drop<bool>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl felt252Copy of Copy<felt252>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl felt252Copy of Copy<felt252>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl felt252Drop of Drop<felt252>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl felt252Drop of Drop<felt252>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:53
impl BoxCopy<T, impl TCopy: Copy<T>> of Copy<Box<T>>:
                                                    ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:53
impl BoxCopy<T, impl TCopy: Copy<T>> of Copy<Box<T>>:
                                                    ^

error: Missing token TerminalSemicolon.
 --> impls:2:53
impl BoxDrop<T, impl TDrop: Drop<T>> of Drop<Box<T>>:
                                                    ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:53
impl BoxDrop<T, impl TDrop: Drop<T>> of Drop<Box<T>>:
                                                    ^

error: Missing token TerminalSemicolon.
 --> impls:1:63
impl NullableCopy<T, impl TCopy: Copy<T>> of Copy<Nullable<T>>:
                                                              ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:63
impl NullableCopy<T, impl TCopy: Copy<T>> of Copy<Nullable<T>>:
                                                              ^

error: Missing token TerminalSemicolon.
 --> impls:2:63
impl NullableDrop<T, impl TDrop: Drop<T>> of Drop<Nullable<T>>:
                                                              ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:63
impl NullableDrop<T, impl TDrop: Drop<T>> of Drop<Nullable<T>>:
                                                              ^

error: Missing token TerminalSemicolon.
 --> impls:1:57
impl ArrayDrop<T, impl TDrop: Drop<T>> of Drop<Array<T>>:
                                                        ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:57
impl ArrayDrop<T, impl TDrop: Drop<T>> of Drop<Array<T>>:
                                                        ^

error: Missing token TerminalSemicolon.
 --> impls:1:86
impl ResultCopy<T, E, impl TCopy: Copy<T>, impl ECopy: Copy<E>> of Copy<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:86
impl ResultCopy<T, E, impl TCopy: Copy<T>, impl ECopy: Copy<E>> of Copy<Result<T, E>>:
                                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:86
impl ResultDrop<T, E, impl TDrop: Drop<T>, impl EDrop: Drop<E>> of Drop<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:86
impl ResultDrop<T, E, impl TDrop: Drop<T>, impl EDrop: Drop<E>> of Drop<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:19:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:59
impl OptionCopy<T, impl TCopy: Copy<T>> of Copy<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:59
impl OptionCopy<T, impl TCopy: Copy<T>> of Copy<Option<T>>:
                                                          ^

error: Missing token TerminalSemicolon.
 --> impls:2:59
impl OptionDrop<T, impl TDrop: Drop<T>> of Drop<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:59
impl OptionDrop<T, impl TDrop: Drop<T>> of Drop<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:19:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl EcPointCopy of Copy<EcPoint>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl EcPointCopy of Copy<EcPoint>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl EcPointDrop of Drop<EcPoint>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl EcPointDrop of Drop<EcPoint>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl EcStateDrop of Drop<EcState>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl EcStateDrop of Drop<EcState>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u128Copy of Copy<u128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u128Copy of Copy<u128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u128Drop of Drop<u128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u128Drop of Drop<u128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:24
impl u8Copy of Copy<u8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:24
impl u8Copy of Copy<u8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:24
impl u8Drop of Drop<u8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:24
impl u8Drop of Drop<u8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u16Copy of Copy<u16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u16Copy of Copy<u16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u16Drop of Drop<u16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u16Drop of Drop<u16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u32Copy of Copy<u32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u32Copy of Copy<u32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u32Drop of Drop<u32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u32Drop of Drop<u32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u64Copy of Copy<u64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u64Copy of Copy<u64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u64Drop of Drop<u64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u64Drop of Drop<u64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u256Copy of Copy<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u256Copy of Copy<u256>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u256Drop of Drop<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u256Drop of Drop<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u512Copy of Copy<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u512Copy of Copy<u512>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u512Drop of Drop<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u512Drop of Drop<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:24
impl i8Copy of Copy<i8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:24
impl i8Copy of Copy<i8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:24
impl i8Drop of Drop<i8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:24
impl i8Drop of Drop<i8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i16Copy of Copy<i16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i16Copy of Copy<i16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i16Drop of Drop<i16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i16Drop of Drop<i16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i32Copy of Copy<i32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i32Copy of Copy<i32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i32Drop of Drop<i32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i32Drop of Drop<i32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i64Copy of Copy<i64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i64Copy of Copy<i64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i64Drop of Drop<i64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i64Drop of Drop<i64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl i128Copy of Copy<i128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl i128Copy of Copy<i128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl i128Drop of Drop<i128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl i128Drop of Drop<i128>:
                           ^

error: The name `ne` is defined multiple times.
 --> impls:9:8
    fn ne(lhs: @u512, rhs: @u512) -> bool {
       ^^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl u256PartialEq of PartialEq<u256> {
     ^***********^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl u512PartialEq of PartialEq<u512> {
     ^***********^

error: Missing token TerminalSemicolon.
 --> impls:1:44
impl BuiltinCostsCopy of Copy<BuiltinCosts>:
                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:44
impl BuiltinCostsCopy of Copy<BuiltinCosts>:
                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:44
impl BuiltinCostsDrop of Drop<BuiltinCosts>:
                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:44
impl BuiltinCostsDrop of Drop<BuiltinCosts>:
                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:60
impl PoseidonBuiltinStateCopy of Copy<PoseidonBuiltinState>:
                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:60
impl PoseidonBuiltinStateCopy of Copy<PoseidonBuiltinState>:
                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:60
impl PoseidonBuiltinStateDrop of Drop<PoseidonBuiltinState>:
                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:60
impl PoseidonBuiltinStateDrop of Drop<PoseidonBuiltinState>:
                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl StorageAddressCopy of Copy<StorageAddress>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl StorageAddressCopy of Copy<StorageAddress>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl StorageAddressDrop of Drop<StorageAddress>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl StorageAddressDrop of Drop<StorageAddress>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:56
impl StorageBaseAddressCopy of Copy<StorageBaseAddress>:
                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:56
impl StorageBaseAddressCopy of Copy<StorageBaseAddress>:
                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:56
impl StorageBaseAddressDrop of Drop<StorageBaseAddress>:
                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:56
impl StorageBaseAddressDrop of Drop<StorageBaseAddress>:
                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl SignatureCopy of Copy<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl SignatureCopy of Copy<Signature>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl SignatureDrop of Drop<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl SignatureDrop of Drop<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl SignaturePartialEq of PartialEq<Signature> {
     ^****************^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl Secp256k1PointCopy of Copy<Secp256k1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl Secp256k1PointCopy of Copy<Secp256k1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl Secp256k1PointDrop of Drop<Secp256k1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl Secp256k1PointDrop of Drop<Secp256k1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl Secp256r1PointCopy of Copy<Secp256r1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl Secp256r1PointCopy of Copy<Secp256r1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl Secp256r1PointDrop of Drop<Secp256r1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl Secp256r1PointDrop of Drop<Secp256r1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:50
impl ContractAddressCopy of Copy<ContractAddress>:
                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:50
impl ContractAddressCopy of Copy<ContractAddress>:
                                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:50
impl ContractAddressDrop of Drop<ContractAddress>:
                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:50
impl ContractAddressDrop of Drop<ContractAddress>:
                                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:40
impl EthAddressCopy of Copy<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:40
impl EthAddressCopy of Copy<EthAddress>:
                                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:40
impl EthAddressDrop of Drop<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:40
impl EthAddressDrop of Drop<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl EthAddressPartialEq of PartialEq<EthAddress> {
     ^*****************^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl ClassHashCopy of Copy<ClassHash>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl ClassHashCopy of Copy<ClassHash>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl ClassHashDrop of Drop<ClassHash>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl ClassHashDrop of Drop<ClassHash>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:46
impl ExecutionInfoCopy of Copy<ExecutionInfo>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:46
impl ExecutionInfoCopy of Copy<ExecutionInfo>:
                                             ^

error: Missing token TerminalSemicolon.
 --> impls:2:46
impl ExecutionInfoDrop of Drop<ExecutionInfo>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:46
impl ExecutionInfoDrop of Drop<ExecutionInfo>:
                                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl BlockInfoCopy of Copy<BlockInfo>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl BlockInfoCopy of Copy<BlockInfo>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl BlockInfoDrop of Drop<BlockInfo>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl BlockInfoDrop of Drop<BlockInfo>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:32
impl TxInfoCopy of Copy<TxInfo>:
                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:32
impl TxInfoCopy of Copy<TxInfo>:
                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:32
impl TxInfoDrop of Drop<TxInfo>:
                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:32
impl TxInfoDrop of Drop<TxInfo>:
                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl CallDrop of Drop<Call>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl CallDrop of Drop<Call>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:70
impl AccountContractDispatcherCopy of Copy<AccountContractDispatcher>:
                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:70
impl AccountContractDispatcherCopy of Copy<AccountContractDispatcher>:
                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:70
impl AccountContractDispatcherDrop of Drop<AccountContractDispatcher>:
                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:70
impl AccountContractDispatcherDrop of Drop<AccountContractDispatcher>:
                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:84
impl AccountContractLibraryDispatcherCopy of Copy<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:84
impl AccountContractLibraryDispatcherCopy of Copy<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Missing token TerminalSemicolon.
 --> impls:2:84
impl AccountContractLibraryDispatcherDrop of Drop<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:84
impl AccountContractLibraryDispatcherDrop of Drop<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Missing token TerminalSemicolon.
 --> impls:1:92
impl AccountContractSafeLibraryDispatcherCopy of Copy<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:92
impl AccountContractSafeLibraryDispatcherCopy of Copy<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:92
impl AccountContractSafeLibraryDispatcherDrop of Drop<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:92
impl AccountContractSafeLibraryDispatcherDrop of Drop<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:78
impl AccountContractSafeDispatcherCopy of Copy<AccountContractSafeDispatcher>:
                                                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:78
impl AccountContractSafeDispatcherCopy of Copy<AccountContractSafeDispatcher>:
                                                                             ^

error: Missing token TerminalSemicolon.
 --> impls:2:78
impl AccountContractSafeDispatcherDrop of Drop<AccountContractSafeDispatcher>:
                                                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:78
impl AccountContractSafeDispatcherDrop of Drop<AccountContractSafeDispatcher>:
                                                                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:61
impl NonZeroCopy<T, impl TCopy: Copy<T>> of Copy<NonZero<T>>:
                                                            ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:61
impl NonZeroCopy<T, impl TCopy: Copy<T>> of Copy<NonZero<T>>:
                                                            ^

error: Missing token TerminalSemicolon.
 --> impls:2:61
impl NonZeroDrop<T, impl TDrop: Drop<T>> of Drop<NonZero<T>>:
                                                            ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:61
impl NonZeroDrop<T, impl TDrop: Drop<T>> of Drop<NonZero<T>>:
                                                            ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl bytes31Copy of Copy<bytes31>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl bytes31Copy of Copy<bytes31>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl bytes31Drop of Drop<bytes31>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl bytes31Drop of Drop<bytes31>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl ByteArrayDrop of Drop<ByteArray>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl ByteArrayDrop of Drop<ByteArray>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:58
impl IContractDispatcherCopy of Copy<IContractDispatcher>:
                                                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:58
impl IContractDispatcherCopy of Copy<IContractDispatcher>:
                                                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:58
impl IContractDispatcherDrop of Drop<IContractDispatcher>:
                                                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:58
impl IContractDispatcherDrop of Drop<IContractDispatcher>:
                                                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:72
impl IContractLibraryDispatcherCopy of Copy<IContractLibraryDispatcher>:
                                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:72
impl IContractLibraryDispatcherCopy of Copy<IContractLibraryDispatcher>:
                                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:72
impl IContractLibraryDispatcherDrop of Drop<IContractLibraryDispatcher>:
                                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:72
impl IContractLibraryDispatcherDrop of Drop<IContractLibraryDispatcher>:
                                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:80
impl IContractSafeLibraryDispatcherCopy of Copy<IContractSafeLibraryDispatcher>:
                                                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:80
impl IContractSafeLibraryDispatcherCopy of Copy<IContractSafeLibraryDispatcher>:
                                                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:80
impl IContractSafeLibraryDispatcherDrop of Drop<IContractSafeLibraryDispatcher>:
                                                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:80
impl IContractSafeLibraryDispatcherDrop of Drop<IContractSafeLibraryDispatcher>:
                                                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:66
impl IContractSafeDispatcherCopy of Copy<IContractSafeDispatcher>:
                                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:66
impl IContractSafeDispatcherCopy of Copy<IContractSafeDispatcher>:
                                                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:66
impl IContractSafeDispatcherDrop of Drop<IContractSafeDispatcher>:
                                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:66
impl IContractSafeDispatcherDrop of Drop<IContractSafeDispatcher>:
                                                                 ^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:29
    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;
                            ^*^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:48
    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;
                                               ^*^

error: Plugin diagnostic: Parameter name `__calldata__` cannot be used.
 --> lib.cairo:9:27
    fn bad_sig2(self: @T, __calldata__: felt252);
                          ^**********^
