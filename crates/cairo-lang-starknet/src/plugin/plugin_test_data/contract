//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod test_contract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[external(v0)]
    fn get_something(self: @ContractState, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external(v0)]
    fn set_something(ref self: ContractState, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: ContractState, from_address: felt252, arg: felt252, num: felt252) {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        AwesomeEvent: AwesomeEvent,
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external(v0)]
    fn test_serde(
        ref self: ContractState,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[external(v0)]
    fn get_something(self: @ContractState, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external(v0)]
    fn set_something(ref self: ContractState, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: ContractState, from_address: felt252, arg: felt252, num: felt252) {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        AwesomeEvent: AwesomeEvent,
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external(v0)]
    fn test_serde(
        ref self: ContractState,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 1010490069093431966487018155674502699168459723066331577845463233808659387585;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct ContractState {
    }
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }


    
    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@data),
            ).unwrap_syscall()
        }
    }





trait __abi<ContractState> {
    #[external]
        fn get_something(self: @ContractState, ref arg: felt252, num: felt252) -> felt252;
        #[external]
        fn set_something(ref self: ContractState, ref arg: felt252, num: felt252);
        #[l1_handler]
        fn l1_handler_func(ref self: ContractState, from_address: felt252, arg: felt252, num: felt252);
        #[external]
        fn test_serde(
        ref self: ContractState,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    );
        
    
}

mod __external {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn get_something(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::require_implicit::<System>();
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let mut __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #1');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #2');
            assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            
            let res = super::get_something(@contract_state, ref __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
            // Result.
            serde::Serde::<felt252>::serialize(@res, ref arr);
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn set_something(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::require_implicit::<System>();
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let mut __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #1');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #2');
            assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            super::set_something(ref contract_state, ref __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_serde(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::require_implicit::<System>();
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_contract_address =
                serde::Serde::<ContractAddress>::deserialize(ref data)
                    .expect('Failed to deserialize param #1');

            let __arg_class_hash =
                serde::Serde::<ClassHash>::deserialize(ref data)
                    .expect('Failed to deserialize param #2');

            let __arg_storage_address =
                serde::Serde::<StorageAddress>::deserialize(ref data)
                    .expect('Failed to deserialize param #3');
            assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            super::test_serde(ref contract_state, __arg_contract_address, __arg_class_hash, __arg_storage_address);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_func(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::require_implicit::<System>();
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #1');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #2');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data)
                    .expect('Failed to deserialize param #3');
            assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            super::l1_handler_func(ref contract_state, __arg_from_address, __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __constructor {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl EventDrop of Drop<Event>:


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::AwesomeEvent(val) => {
                array::ArrayTrait::append(ref keys, 0x2fbea1ee750e49ff764a5c7183b4201cc4beb8ead010fbb75b671e6f31bb82);
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::BestEventEver(val) => {
                array::ArrayTrait::append(ref keys, 0x7b89143e59dd87ddfbccfa6075ca9296b9b5f26183bc738db54c2313fab4ed);
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == 0x2fbea1ee750e49ff764a5c7183b4201cc4beb8ead010fbb75b671e6f31bb82 {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::AwesomeEvent(val));
            }
            if selector == 0x7b89143e59dd87ddfbccfa6075ca9296b9b5f26183bc738db54c2313fab4ed {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::BestEventEver(val));
            }
        Option::None
    }
}
impl EventAwesomeEventIntoEvent of Into<AwesomeEvent, Event> {
    fn into(self: AwesomeEvent) -> Event {
        Event::AwesomeEvent(self)
    }
}
impl EventBestEventEverIntoEvent of Into<BestEventEver, Event> {
    fn into(self: BestEventEver) -> Event {
        Event::BestEventEver(self)
    }
}



impls:

impl AwesomeEventDrop of Drop<AwesomeEvent>:


event_impl:

impl AwesomeEventIsEvent of starknet::Event<AwesomeEvent> {
    fn append_keys_and_data(
        self: @AwesomeEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.x, ref data);
                serde::Serde::serialize(self.data, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<AwesomeEvent> {
                let x = serde::Serde::deserialize(
                    ref data
                )?;
                let data = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(AwesomeEvent {x, data, })
    }
}

impls:

impl BestEventEverDrop of Drop<BestEventEver>:


event_impl:

impl BestEventEverIsEvent of starknet::Event<BestEventEver> {
    fn append_keys_and_data(
        self: @BestEventEver, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<BestEventEver> {
        Option::Some(BestEventEver {})
    }
}

impls:

impl ContractStateDrop of Drop<ContractState>:

//! > expected_diagnostics
error: Missing token TerminalSemicolon.
 --> impls:1:28
impl boolCopy of Copy<bool>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl boolCopy of Copy<bool>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl boolDrop of Drop<bool>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl boolDrop of Drop<bool>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl felt252Copy of Copy<felt252>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl felt252Copy of Copy<felt252>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl felt252Drop of Drop<felt252>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl felt252Drop of Drop<felt252>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:53
impl BoxCopy<T, impl TCopy: Copy<T>> of Copy<Box<T>>:
                                                    ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:53
impl BoxCopy<T, impl TCopy: Copy<T>> of Copy<Box<T>>:
                                                    ^

error: Missing token TerminalSemicolon.
 --> impls:2:53
impl BoxDrop<T, impl TDrop: Drop<T>> of Drop<Box<T>>:
                                                    ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:53
impl BoxDrop<T, impl TDrop: Drop<T>> of Drop<Box<T>>:
                                                    ^

error: Missing token TerminalSemicolon.
 --> impls:1:63
impl NullableCopy<T, impl TCopy: Copy<T>> of Copy<Nullable<T>>:
                                                              ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:63
impl NullableCopy<T, impl TCopy: Copy<T>> of Copy<Nullable<T>>:
                                                              ^

error: Missing token TerminalSemicolon.
 --> impls:2:63
impl NullableDrop<T, impl TDrop: Drop<T>> of Drop<Nullable<T>>:
                                                              ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:63
impl NullableDrop<T, impl TDrop: Drop<T>> of Drop<Nullable<T>>:
                                                              ^

error: Missing token TerminalSemicolon.
 --> impls:1:57
impl ArrayDrop<T, impl TDrop: Drop<T>> of Drop<Array<T>>:
                                                        ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:57
impl ArrayDrop<T, impl TDrop: Drop<T>> of Drop<Array<T>>:
                                                        ^

error: Missing token TerminalSemicolon.
 --> impls:1:86
impl ResultCopy<T, E, impl TCopy: Copy<T>, impl ECopy: Copy<E>> of Copy<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:86
impl ResultCopy<T, E, impl TCopy: Copy<T>, impl ECopy: Copy<E>> of Copy<Result<T, E>>:
                                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:86
impl ResultDrop<T, E, impl TDrop: Drop<T>, impl EDrop: Drop<E>> of Drop<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:86
impl ResultDrop<T, E, impl TDrop: Drop<T>, impl EDrop: Drop<E>> of Drop<Result<T, E>>:
                                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:19:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:59
impl OptionCopy<T, impl TCopy: Copy<T>> of Copy<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:59
impl OptionCopy<T, impl TCopy: Copy<T>> of Copy<Option<T>>:
                                                          ^

error: Missing token TerminalSemicolon.
 --> impls:2:59
impl OptionDrop<T, impl TDrop: Drop<T>> of Drop<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:59
impl OptionDrop<T, impl TDrop: Drop<T>> of Drop<Option<T>>:
                                                          ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:19:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl EcPointCopy of Copy<EcPoint>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl EcPointCopy of Copy<EcPoint>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl EcPointDrop of Drop<EcPoint>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl EcPointDrop of Drop<EcPoint>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl EcStateDrop of Drop<EcState>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl EcStateDrop of Drop<EcState>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u128Copy of Copy<u128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u128Copy of Copy<u128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u128Drop of Drop<u128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u128Drop of Drop<u128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:24
impl u8Copy of Copy<u8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:24
impl u8Copy of Copy<u8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:24
impl u8Drop of Drop<u8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:24
impl u8Drop of Drop<u8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u16Copy of Copy<u16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u16Copy of Copy<u16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u16Drop of Drop<u16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u16Drop of Drop<u16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u32Copy of Copy<u32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u32Copy of Copy<u32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u32Drop of Drop<u32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u32Drop of Drop<u32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl u64Copy of Copy<u64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl u64Copy of Copy<u64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl u64Drop of Drop<u64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl u64Drop of Drop<u64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u256Copy of Copy<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u256Copy of Copy<u256>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u256Drop of Drop<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u256Drop of Drop<u256>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl u512Copy of Copy<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl u512Copy of Copy<u512>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl u512Drop of Drop<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl u512Drop of Drop<u512>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Missing token TerminalSemicolon.
 --> impls:1:24
impl i8Copy of Copy<i8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:24
impl i8Copy of Copy<i8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:24
impl i8Drop of Drop<i8>:
                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:24
impl i8Drop of Drop<i8>:
                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i16Copy of Copy<i16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i16Copy of Copy<i16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i16Drop of Drop<i16>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i16Drop of Drop<i16>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i32Copy of Copy<i32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i32Copy of Copy<i32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i32Drop of Drop<i32>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i32Drop of Drop<i32>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:26
impl i64Copy of Copy<i64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:26
impl i64Copy of Copy<i64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:2:26
impl i64Drop of Drop<i64>:
                         ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:26
impl i64Drop of Drop<i64>:
                         ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl i128Copy of Copy<i128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl i128Copy of Copy<i128>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:28
impl i128Drop of Drop<i128>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:28
impl i128Drop of Drop<i128>:
                           ^

error: The name `ne` is defined multiple times.
 --> impls:9:8
    fn ne(lhs: @u512, rhs: @u512) -> bool {
       ^^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl u256PartialEq of PartialEq<u256> {
     ^***********^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl u512PartialEq of PartialEq<u512> {
     ^***********^

error: Missing token TerminalSemicolon.
 --> impls:1:44
impl BuiltinCostsCopy of Copy<BuiltinCosts>:
                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:44
impl BuiltinCostsCopy of Copy<BuiltinCosts>:
                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:44
impl BuiltinCostsDrop of Drop<BuiltinCosts>:
                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:44
impl BuiltinCostsDrop of Drop<BuiltinCosts>:
                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:60
impl PoseidonBuiltinStateCopy of Copy<PoseidonBuiltinState>:
                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:60
impl PoseidonBuiltinStateCopy of Copy<PoseidonBuiltinState>:
                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:60
impl PoseidonBuiltinStateDrop of Drop<PoseidonBuiltinState>:
                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:60
impl PoseidonBuiltinStateDrop of Drop<PoseidonBuiltinState>:
                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl StorageAddressCopy of Copy<StorageAddress>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl StorageAddressCopy of Copy<StorageAddress>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl StorageAddressDrop of Drop<StorageAddress>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl StorageAddressDrop of Drop<StorageAddress>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:56
impl StorageBaseAddressCopy of Copy<StorageBaseAddress>:
                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:56
impl StorageBaseAddressCopy of Copy<StorageBaseAddress>:
                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:56
impl StorageBaseAddressDrop of Drop<StorageBaseAddress>:
                                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:56
impl StorageBaseAddressDrop of Drop<StorageBaseAddress>:
                                                       ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl SignatureCopy of Copy<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl SignatureCopy of Copy<Signature>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl SignatureDrop of Drop<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl SignatureDrop of Drop<Signature>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl SignaturePartialEq of PartialEq<Signature> {
     ^****************^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl Secp256k1PointCopy of Copy<Secp256k1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl Secp256k1PointCopy of Copy<Secp256k1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl Secp256k1PointDrop of Drop<Secp256k1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl Secp256k1PointDrop of Drop<Secp256k1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:48
impl Secp256r1PointCopy of Copy<Secp256r1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:48
impl Secp256r1PointCopy of Copy<Secp256r1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:48
impl Secp256r1PointDrop of Drop<Secp256r1Point>:
                                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:48
impl Secp256r1PointDrop of Drop<Secp256r1Point>:
                                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:50
impl ContractAddressCopy of Copy<ContractAddress>:
                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:50
impl ContractAddressCopy of Copy<ContractAddress>:
                                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:50
impl ContractAddressDrop of Drop<ContractAddress>:
                                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:50
impl ContractAddressDrop of Drop<ContractAddress>:
                                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:40
impl EthAddressCopy of Copy<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:40
impl EthAddressCopy of Copy<EthAddress>:
                                       ^

error: Missing token TerminalSemicolon.
 --> impls:2:40
impl EthAddressDrop of Drop<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:40
impl EthAddressDrop of Drop<EthAddress>:
                                       ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:12:1
}
^

error: Not all trait items are implemented. Missing: 'ne'.
 --> impls:3:6
impl EthAddressPartialEq of PartialEq<EthAddress> {
     ^*****************^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl ClassHashCopy of Copy<ClassHash>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl ClassHashCopy of Copy<ClassHash>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl ClassHashDrop of Drop<ClassHash>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl ClassHashDrop of Drop<ClassHash>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:46
impl ExecutionInfoCopy of Copy<ExecutionInfo>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:46
impl ExecutionInfoCopy of Copy<ExecutionInfo>:
                                             ^

error: Missing token TerminalSemicolon.
 --> impls:2:46
impl ExecutionInfoDrop of Drop<ExecutionInfo>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:46
impl ExecutionInfoDrop of Drop<ExecutionInfo>:
                                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl BlockInfoCopy of Copy<BlockInfo>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl BlockInfoCopy of Copy<BlockInfo>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:38
impl BlockInfoDrop of Drop<BlockInfo>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:38
impl BlockInfoDrop of Drop<BlockInfo>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:32
impl TxInfoCopy of Copy<TxInfo>:
                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:32
impl TxInfoCopy of Copy<TxInfo>:
                               ^

error: Missing token TerminalSemicolon.
 --> impls:2:32
impl TxInfoDrop of Drop<TxInfo>:
                               ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:32
impl TxInfoDrop of Drop<TxInfo>:
                               ^

error: Missing token TerminalSemicolon.
 --> impls:1:28
impl CallDrop of Drop<Call>:
                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:28
impl CallDrop of Drop<Call>:
                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:70
impl AccountContractDispatcherCopy of Copy<AccountContractDispatcher>:
                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:70
impl AccountContractDispatcherCopy of Copy<AccountContractDispatcher>:
                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:2:70
impl AccountContractDispatcherDrop of Drop<AccountContractDispatcher>:
                                                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:70
impl AccountContractDispatcherDrop of Drop<AccountContractDispatcher>:
                                                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:84
impl AccountContractLibraryDispatcherCopy of Copy<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:84
impl AccountContractLibraryDispatcherCopy of Copy<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Missing token TerminalSemicolon.
 --> impls:2:84
impl AccountContractLibraryDispatcherDrop of Drop<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:84
impl AccountContractLibraryDispatcherDrop of Drop<AccountContractLibraryDispatcher>:
                                                                                   ^

error: Missing token TerminalSemicolon.
 --> impls:1:92
impl AccountContractSafeLibraryDispatcherCopy of Copy<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:92
impl AccountContractSafeLibraryDispatcherCopy of Copy<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:2:92
impl AccountContractSafeLibraryDispatcherDrop of Drop<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:92
impl AccountContractSafeLibraryDispatcherDrop of Drop<AccountContractSafeLibraryDispatcher>:
                                                                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:78
impl AccountContractSafeDispatcherCopy of Copy<AccountContractSafeDispatcher>:
                                                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:78
impl AccountContractSafeDispatcherCopy of Copy<AccountContractSafeDispatcher>:
                                                                             ^

error: Missing token TerminalSemicolon.
 --> impls:2:78
impl AccountContractSafeDispatcherDrop of Drop<AccountContractSafeDispatcher>:
                                                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:78
impl AccountContractSafeDispatcherDrop of Drop<AccountContractSafeDispatcher>:
                                                                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:61
impl NonZeroCopy<T, impl TCopy: Copy<T>> of Copy<NonZero<T>>:
                                                            ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:61
impl NonZeroCopy<T, impl TCopy: Copy<T>> of Copy<NonZero<T>>:
                                                            ^

error: Missing token TerminalSemicolon.
 --> impls:2:61
impl NonZeroDrop<T, impl TDrop: Drop<T>> of Drop<NonZero<T>>:
                                                            ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:61
impl NonZeroDrop<T, impl TDrop: Drop<T>> of Drop<NonZero<T>>:
                                                            ^

error: Missing token TerminalSemicolon.
 --> impls:1:34
impl bytes31Copy of Copy<bytes31>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:34
impl bytes31Copy of Copy<bytes31>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:2:34
impl bytes31Drop of Drop<bytes31>:
                                 ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:2:34
impl bytes31Drop of Drop<bytes31>:
                                 ^

error: Missing token TerminalSemicolon.
 --> impls:1:38
impl ByteArrayDrop of Drop<ByteArray>:
                                     ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:38
impl ByteArrayDrop of Drop<ByteArray>:
                                     ^

error: Missing token TerminalSemicolon.
 --> impls:1:30
impl EventDrop of Drop<Event>:
                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:30
impl EventDrop of Drop<Event>:
                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:44
impl AwesomeEventDrop of Drop<AwesomeEvent>:
                                           ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:44
impl AwesomeEventDrop of Drop<AwesomeEvent>:
                                           ^

error: Missing token TerminalSemicolon.
 --> impls:1:46
impl BestEventEverDrop of Drop<BestEventEver>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:46
impl BestEventEverDrop of Drop<BestEventEver>:
                                             ^

error: Missing token TerminalSemicolon.
 --> impls:1:46
impl ContractStateDrop of Drop<ContractState>:
                                             ^

error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias or an attribute.
 --> impls:1:46
impl ContractStateDrop of Drop<ContractState>:
                                             ^
